;GAME.ASM

PREVIOUS_INPUT	EQU	20H.0
INPUT	EQU	P0.0
JUMPING	EQU	21H
JUMP_DURATION	EQU	22H

	JMP	INIT

INIT:
	CLR	PREVIOUS_INPUT
	MOV	INPUT, #0
	CLR	INPUT
	MOV	JUMP_DURATION, #5
	JMP	START

START:
	JMP	GAME_LOOP

GAME_LOOP:
	MOV	A, JUMPING
	JZ	CHECK_INPUT

GAME_LOOP_AFTER_INPUT:
	NOP
	; REST OF THE GAME LOGIC HERE
	CALL	DECREMENT_JUMPING
	JMP	GAME_LOOP

CHECK_INPUT:
	MOV	A, INPUT
	MOV	B, PREVIOUS_INPUT
	XRL	A, B
	JNZ	INPUT_CHANGED
	JMP	GAME_LOOP_AFTER_INPUT

INPUT_CHANGED:
	MOV	JUMPING, JUMP_DURATION
	JMP	SET_PREVIOUS_INPUT

SET_PREVIOUS_INPUT:
	MOV	PREVIOUS_INPUT, INPUT
	JMP	GAME_LOOP_AFTER_INPUT

DECREMENT_JUMPING:
	MOV	A, JUMPING
	JZ	DECREMENT_JUMPING_END
	DEC	JUMPING
DECREMENT_JUMPING_END:
	RET

